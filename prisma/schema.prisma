// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model author {
//   id          Int    @id @default(autoincrement())
//   name        String @db.VarChar(191)
//   designation String @default("anonymous") @db.VarChar(2048)
//   email       String @unique @db.VarChar(255)
//   blog        blog[]
// }

// model blog {
//   id          Int      @id @default(autoincrement())
//   title       String   @db.VarChar(2048)
//   description String?  @db.VarChar(2048)
//   slug        String   @db.VarChar(2048)
//   body        String   @db.VarChar(4096)
//   createdAt DateTime @default(now())
//   authorId    Int?
//   author      author?  @relation(fields: [authorId], references: [id])
// }

// model tags {
//   id    Int    @id @default(autoincrement())
//   name  String @db.VarChar(200)
// }

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


// model author {
//   id    Int    @id @default(autoincrement())
//   name  String @db.VarChar(191)
//   // designation String @default("anonymous") @db.VarChar(2048)
//   email String @unique @db.VarChar(255)
//   password String @db.VarChar(255) 
//   blog  blog[]
// }

model user {
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  email String @unique @db.VarChar(255)
  password String @db.VarChar(255)
  role Int 
  createdAt DateTime @default(now())
  blog blog[]
}

model blog {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(2048)
  // description String?  @db.VarChar(2048)
  slug      String   @db.VarChar(2048)
  status String @db.VarChar(255) //active or inactive (soft deletion)
  flags    Int  //states
  comments String @db.VarChar(2048) //if and when blog is rejected
  // body        String   @db.VarChar(4096)
  createdAt DateTime @default(now())
  updatedAt DateTime? 
  userId  Int
  user    user?  @relation(fields: [userId], references: [id])
  
  // image       String[]
  tags      tags[]
  Block     Block[]
  comment comments[]
}

model comments {
  id          Int     @id @default(autoincrement())
  comment    String  @db.VarChar(2048)
  blogId Int
  blog blog @relation(fields: [blogId], references: [id])
}

model tags {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(200)
  createdAt DateTime @default(now())
  blog blog[]
}

model Block {
  id        Int    @id @default(autoincrement())
  sequence  Int
  blockData Json
  blogId    Int
  blog      blog?  @relation(fields: [blogId], references: [id])
}

// model tagsonBlogs {
//   blog   blog @relation(fields: [blogId], references: [id])
//   blogId Int
//   tags   tags @relation(fields: [tagsId], references: [id])
//   tagsId Int

//   @@id([blogId, tagsId])
// }
